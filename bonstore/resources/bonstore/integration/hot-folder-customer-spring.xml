<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:file="http://www.springframework.org/schema/integration/file"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

     <!--General setup-->
    <int:channel id="errorChannel" />
    <int:service-activator input-channel="errorChannel" ref="errorHandler" method="onError" />
    <bean id="errorHandler" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ErrorHandler">
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>
    <bean id="cleanupHelper" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.CleanupHelper">
        <property name="timeStampFormat" value="yyyyMMddHHmmssSSS" />
    </bean>
    <bean id="fileOrderComparator" class="de.hybris.platform.acceleratorservices.dataimport.batch.FileOrderComparator">
        <property name="prefixPriority">
            <map>
                <!-- default priority is 0 -->
                <entry key="base_product" value="2" />
                <entry key="variant" value="1" />
            </map>
        </property>
    </bean>
    <bean id="baseDirectory" class="java.lang.String">
        <constructor-arg value="#{configurationService.configuration.getProperty('bonstore.batch.impex.basefolder')}" />
    </bean>
    <!-- Impex import process -->
    <!-- 1) Scan for files, site dependent -->
    <!-- check {extensionName}-spring-{siteName}.xml files for spring integration configuration of this first step -->

    <!-- 2) move the file to processing and setup header, partly site dependent -->
    <int:service-activator input-channel="batchFilesHeaderInit" output-channel="batchFilesHeader" ref="headerInitTask"
                           method="execute"/>

    <int:poller default="true" fixed-delay="50"/>

    
    <bean id="headerInitTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderInitTask">
        <property name="sequenceIdParser" ref="batchSequenceIdParser"/>
        <property name="languageParser" ref="batchLanguageParser"/>
        <property name="fallbackLanguage" value="en" />
    </bean>
    <bean id="batchSequenceIdParser" class="de.hybris.platform.acceleratorservices.dataimport.batch.util.SequenceIdParser">
        <property name="parser">
            <bean class="de.hybris.platform.acceleratorservices.util.RegexParser">
                <property name="regex" value="-(\d+)\.csv" />
            </bean>
        </property>
    </bean>
    <bean id="batchLanguageParser" class="de.hybris.platform.acceleratorservices.util.RegexParser">
        <property name="regex" value="-(\w{2})-(\d+)\.csv" />
    </bean>

    <!-- 3) transform csv to impex file -->
    <int:service-activator input-channel="batchFilesHeader" output-channel="batchFilesTran" ref="batchTransformerTask"
                           method="execute" />
    <bean id="batchTransformerTask"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ImpexTransformerTask"
          init-method="initConvertersMap">
        <property name="fieldSeparator" value="," />
        <property name="encoding" value="UTF-8" />
        <property name="linesToSkip" value="0"/>
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>

    <!-- Transformer converters mappings -->

    <bean id="batchCustomerConverterMapping"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
          p:mapping="customer"
          p:converter-ref="batchCustomerConverter"/>

    <!-- 4) run impex import -->
    <int:service-activator input-channel="batchFilesTran" output-channel="batchFilesImp" ref="batchRunnerTask"
                           method="execute" />
    <bean id="batchRunnerTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.AbstractImpexRunnerTask">
        <property name="sessionService" ref="sessionService" />
        <property name="importService" ref="importService" />
        <lookup-method name="getImportConfig" bean="importConfig" />
    </bean>
    <bean id="importConfig" class="de.hybris.platform.servicelayer.impex.ImportConfig" scope="prototype">
        <property name="removeOnSuccess" value="true" />
        <property name="failOnError" value="false" />
        <property name="synchronous" value="true" />
        <property name="legacyMode" value="false" />
        <property name="maxThreads" value="#{configurationService.configuration.getProperty('acceleratorservices.batch.impex.max-threads')}" />
        <property name="locale" value="en"/>
    </bean>

    <!-- 5) Cleanup -->
    <int:service-activator input-channel="batchFilesImp" ref="batchCleanupTask" method="execute" />
    <bean id="batchCleanupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.CleanupTask">
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>

    <!-- impex converters -->

    <!-- Converters -->

    <bean id="batchCustomerConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
        <property name="header">
            <value>#{defaultImpexProductHeader}
                # Insert Customer
                $defaultPassword=1234
                $setName=name[cellDecorator=de.hybris.platform.acceleratorservices.dataimport.batch.decorator.CustomerNameDecorator]
                INSERT Customer;uid[unique=true];$setName;title(code);password[default=$defaultPassword]
            </value>
        </property>
        <property name="impexRow">
            <value>;{+0};{1} {2};{3};</value>
        </property>
    </bean>

    <!--<bean id="batchCustomerConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">-->
        <!--<property name="header">-->
            <!--<value>#{defaultImpexProductHeader}-->
                <!--# Insert Customer-->
                <!--$defaultPassword=1234-->
                <!--$setName=name[cellDecorator=de.hybris.platform.acceleratorservices.dataimport.batch.decorator.CustomerNameDecorator]-->
                <!--INSERT Customer;uid[unique=true];$setName;title(code);password[default=$defaultPassword]-->
            <!--</value>-->
        <!--</property>-->
        <!--<property name="impexRow">-->
            <!--<value>;{+0};{1} {2};{3};</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- AOP -->
    <aop:config proxy-target-class="false">
        <aop:pointcut id="taskPointcut" expression="execution(* de.hybris.platform.acceleratorservices.dataimport.batch.HeaderTask.*(..))" />
        <aop:aspect ref="timeMeasurementAspect">
            <aop:around pointcut-ref="taskPointcut" method="measure" />
        </aop:aspect>
        <aop:aspect ref="tenantActivationAspect">
            <aop:around pointcut-ref="taskPointcut" method="execute" />
        </aop:aspect>
        <aop:aspect ref="exceptionHandlerAspect">
            <aop:around pointcut-ref="taskPointcut" method="execute" />
        </aop:aspect>
    </aop:config>
    <bean id="timeMeasurementAspect" class="de.hybris.platform.acceleratorservices.dataimport.batch.aop.TimeMeasurementAspect" />
    <bean id="tenantActivationAspect" class="de.hybris.platform.acceleratorservices.dataimport.batch.aop.TenantActivationAspect" />
    <bean id="exceptionHandlerAspect" class="de.hybris.platform.acceleratorservices.dataimport.batch.aop.ExceptionHandlerAspect" />
</beans>